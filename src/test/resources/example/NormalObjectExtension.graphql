interface NormalInterface {
  info: String
  items: [String]
}

union UnionObject = MutationObject | Normal | NormalInterfaceImpl

type MutationObject {
  id: Long!
  name: String!
  parent: MutationObject
}

"Normal GraphQL Object"
type Normal {
  barList: [String]
  "GraphQL count field"
  count(
    #A cnd argument
    cnd: String! = "1"
  ): Int!
  filterDateTimes(args: [DateTime]!): [DateTime]!
  "GraphQL foo field"
  foo: String
  fooList: [String]!
  type: CustomEnum
}

type NormalInterfaceImpl implements NormalInterface {
  data: String
  info: String
  "A foobar field"
  items: [String]
}

type Query {
  hello: String
}

type schema {
  query: Query
}

enum CustomEnum {
  customFirst
  customSecond
}

enum EnumObject {
  #GraphQL Enum first
  first
  no3
  second
}

input MutationInputObject {
  id: Long!
  name: String
  now: DateTime
  parent: MutationInputObject
}
